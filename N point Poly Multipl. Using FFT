#include <bits/stdc++.h>
using namespace std;
typedef long long LL;
const int MOD = 13313; //CHANGE THE MODULO ACCORDING TO QUES
//FFT-Ki-Namespace-Shuru!
namespace FFT {
  #define vectord vector<LL>
  #define fore(i, a, b) for(int i = (int)(a); i <= (int)(b); ++i)
  #define forn(i, n) for(int i = 0; i < (int)(n); ++i)
  typedef long double ld;
  struct base
  {
      typedef double T;
      T re, im;
      base() :re(0), im(0) {}
      base(T re) :re(re), im(0) {}
      base(T re, T im) :re(re), im(im) {}
      base operator + (const base& o) const
      {
          return base(re + o.re, im + o.im);
      }
      base operator - (const base& o) const
      {
          return base(re - o.re, im - o.im);
      }
      base operator * (const base& o) const
      {
          return base(re * o.re - im * o.im, re * o.im + im * o.re);
      }
      base operator * (ld k) const
      {
          return base(re * k, im * k) ;
      }
      base conj() const
      {
          return base(re, -im);
      }
  };
  const int N = 21;
  const int MAXN = (1<<N);
  base w[MAXN];
  base f1[MAXN];
  int rev[MAXN];
  void build_rev(int k)
  {
      static int rk = -1;
      if( k == rk )return ;
      rk = k;
      fore(i, 1, (1<<k) )
      {
          int j = rev[i-1], t = k-1;
          while( t >= 0 && ((j>>t)&1) )
          {
              j ^= 1 << t;
              --t;
          }
          if( t >= 0 )
          {
              j ^= 1 << t;
              --t;
          }
          rev[i] = j;
      }
  }
  void fft(base *a, int k)
  {
      build_rev(k);
      int n = 1 << k;
      forn(i, n) if( rev[i] > i ) swap(a[i], a[rev[i]]);
      for(int l = 2, lil = 1; l <= n; l += l, lil += lil)
      {
          if( w[lil].re == 0 && w[lil].im == 0 )
          {
              ld angle = M_PI / lil;
              base ww( cosl(angle), sinl(angle) );
              if( lil > 1 ) for(int j = 0; j < lil; ++j)
                  {
                      if( j & 1 ) w[lil + j] = w[(lil+j)/2] * ww;
                      else w[lil + j] = w[(lil+j)/2];
                  }
              else w[lil] = base(1, 0);
          }
          for(int i = 0; i < n; i += l) forn(j, lil)
          {
              base v = a[i + j], u = a[i + j + lil] * w[lil + j];
              a[i + j] = v + u;
              a[i + j + lil] = v - u;
          }
      }
  }
  vectord mul(const vectord& a, const vectord& b)
  {
      int k = 1;
      while( (1<<k) < (a.size() + b.size()) ) ++k;
      int n = (1<<k);
      forn(i, n) f1[i] = base(0,0);
      forn(i, a.size()) f1[i] = f1[i] + base(a[i], 0);
      forn(i, b.size()) f1[i] = f1[i] + base(0, b[i]);
      fft(f1, k);
      forn(i, 1 + n/2)
      {
          base p = f1[i] + f1[(n-i)%n].conj();
          base _q = f1[(n-i)%n] - f1[i].conj();
          base q(_q.im, _q.re);
          f1[i] = (p * q) * 0.25;
          if( i > 0 ) f1[(n - i)] = f1[i].conj();
      }
      forn(i, n) f1[i] = f1[i].conj();
      fft(f1, k);
      vectord r(a.size() + b.size() - 1);
      forn(i, r.size() )
      {
          r[i] = (LL) (f1[i].re / n + 0.5) % MOD;
      }
      return r;
  }
};
 //FFT-Ki-Namespace-Khatam!
 
vector<LL> poly[5];
 //Function for N-point Polynomial Multiplication in O(N*(logn)*(logn)) 
vector<LL> solve(int l, int r) {
	if (l == r) {
		return poly[l];
	}
	int mid = (l + r) / 2;
	vector<LL> left = solve(l, mid);
	vector<LL> right = solve(mid + 1, r);
	vector<LL> ans = FFT::mul(left, right);
	return ans;
}
 
int main() {

	int n;
	cin>>n;
	
	for(int i=0;i<n;i++)
	{
	    int siz,x;
	    cin>>siz;
	    while(siz--)
	    {
	        cin>>x;
	        poly[i].push_back(x);
	    }
	}
	vector<LL> anss=solve(0,n-1);
	int si=anss.size();
	for(int i=0;i<si;i++)
	{
	    cout<<anss[i]<<" ";
	}
	cout<<endl;
}
